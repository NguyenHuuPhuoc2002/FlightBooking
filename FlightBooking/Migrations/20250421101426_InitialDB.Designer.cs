// <auto-generated />
using System;
using FlightBooking.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBooking.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250421101426_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FlightBooking.Entities.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiemTichLuy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChiTietDichVu", b =>
                {
                    b.Property<int>("MaChiTietDV")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaChiTietDV"));

                    b.Property<int>("MaDichVu")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaVe")
                        .HasColumnType("char(36)");

                    b.HasKey("MaChiTietDV");

                    b.HasIndex("MaDichVu");

                    b.HasIndex("MaVe");

                    b.ToTable("ChiTietDichVu", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChiTietLienHe", b =>
                {
                    b.Property<int>("MaChiTietLH")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaChiTietLH"));

                    b.Property<string>("DanhXung")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MaVe")
                        .HasColumnType("char(36)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("MaChiTietLH");

                    b.HasIndex("MaVe")
                        .IsUnique();

                    b.ToTable("ChiTietLienHe", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChuyenBay", b =>
                {
                    b.Property<int>("MaChuyenBay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaChuyenBay"));

                    b.Property<float>("GiaVe")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("GioBay")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("GioDen")
                        .HasColumnType("time(6)");

                    b.Property<int>("MaMayBay")
                        .HasColumnType("int");

                    b.Property<int>("MaTuyenBay")
                        .HasColumnType("int");

                    b.Property<DateOnly>("NgayBay")
                        .HasColumnType("date");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("MaChuyenBay");

                    b.HasIndex("MaMayBay");

                    b.HasIndex("MaTuyenBay");

                    b.ToTable("ChuyenBay", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.DichVu", b =>
                {
                    b.Property<int>("MaDichVu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaDichVu"));

                    b.Property<float>("GiaDichVu")
                        .HasColumnType("float");

                    b.Property<string>("TenDichVu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MaDichVu");

                    b.ToTable("DichVu", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ghe", b =>
                {
                    b.Property<string>("MaGhe")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaLoaiGhe")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("MaGhe");

                    b.HasIndex("MaLoaiGhe");

                    b.ToTable("Ghe", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.GiamGia", b =>
                {
                    b.Property<int>("MaGiamGia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaGiamGia"));

                    b.Property<float>("PhanTram")
                        .HasMaxLength(11)
                        .HasColumnType("float");

                    b.HasKey("MaGiamGia");

                    b.ToTable("GiamGia", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.LoaiGhe", b =>
                {
                    b.Property<string>("MaLoaiGhe")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("HeSoGia")
                        .HasColumnType("float");

                    b.Property<string>("TenLoaiGhe")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("MaLoaiGhe");

                    b.ToTable("LoaiGhe", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.MayBay", b =>
                {
                    b.Property<int>("MaMayBay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaMayBay"));

                    b.Property<string>("HangHangKhong")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SoChoNgoi")
                        .HasColumnType("int");

                    b.Property<int>("SoChoNgoiPhoThong")
                        .HasColumnType("int");

                    b.Property<int>("SoChoNgoiThuongGia")
                        .HasColumnType("int");

                    b.Property<string>("TenMayBay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MaMayBay");

                    b.ToTable("MayBay", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.SanBay", b =>
                {
                    b.Property<int>("MaSanBay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaSanBay"));

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MaThanhPho")
                        .HasColumnType("int");

                    b.Property<string>("TenSanBay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MaSanBay");

                    b.HasIndex("MaThanhPho");

                    b.ToTable("SanBay", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ThanhPho", b =>
                {
                    b.Property<int>("MaThanhPho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaThanhPho"));

                    b.Property<string>("TenThanhPho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MaThanhPho");

                    b.ToTable("ThanhPho", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.TuyenBay", b =>
                {
                    b.Property<int>("MaTuyenBay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaTuyenBay"));

                    b.Property<float>("KhoangCach")
                        .HasColumnType("float");

                    b.Property<int>("MaSanBay")
                        .HasColumnType("int");

                    b.Property<int>("MaThanhPhoDen")
                        .HasColumnType("int");

                    b.Property<int>("MaThanhPhoDi")
                        .HasColumnType("int");

                    b.HasKey("MaTuyenBay");

                    b.HasIndex("MaSanBay");

                    b.HasIndex("MaThanhPhoDen");

                    b.HasIndex("MaThanhPhoDi");

                    b.ToTable("TuyenBay", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ve", b =>
                {
                    b.Property<Guid>("MaVe")
                        .HasColumnType("char(36)");

                    b.Property<int>("MaChuyenBay")
                        .HasColumnType("int");

                    b.Property<string>("MaGhe")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("MaGiamGia")
                        .HasColumnType("int");

                    b.Property<int>("MaThanhVien")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayDatVe")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("MaVe");

                    b.HasIndex("MaChuyenBay");

                    b.HasIndex("MaGhe");

                    b.HasIndex("MaGiamGia");

                    b.ToTable("Ve", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChiTietDichVu", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.DichVu", "DichVu")
                        .WithMany("ChiTietDichVus")
                        .HasForeignKey("MaDichVu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.Ve", "Ve")
                        .WithMany("ChiTietDichVus")
                        .HasForeignKey("MaVe")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DichVu");

                    b.Navigation("Ve");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChiTietLienHe", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.Ve", "Ve")
                        .WithOne("ChiTietLienHe")
                        .HasForeignKey("FlightBooking.Entities.Entities.ChiTietLienHe", "MaVe")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Ve");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChuyenBay", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.MayBay", "MayBay")
                        .WithMany("ChuyenBays")
                        .HasForeignKey("MaMayBay")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.TuyenBay", "TuyenBay")
                        .WithMany("ChuyenBays")
                        .HasForeignKey("MaTuyenBay")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MayBay");

                    b.Navigation("TuyenBay");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ghe", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.LoaiGhe", "LoaiGhe")
                        .WithMany("Ghes")
                        .HasForeignKey("MaLoaiGhe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoaiGhe");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.RefreshToken", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.SanBay", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ThanhPho", "ThanhPho")
                        .WithMany("SanBays")
                        .HasForeignKey("MaThanhPho")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ThanhPho");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.TuyenBay", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.SanBay", "SanBay")
                        .WithMany("TuyenBays")
                        .HasForeignKey("MaSanBay")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.ThanhPho", "ThanhPhoDen")
                        .WithMany()
                        .HasForeignKey("MaThanhPhoDen")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.ThanhPho", "ThanhPhoDi")
                        .WithMany()
                        .HasForeignKey("MaThanhPhoDi")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SanBay");

                    b.Navigation("ThanhPhoDen");

                    b.Navigation("ThanhPhoDi");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ve", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ChuyenBay", "ChuyenBay")
                        .WithMany("ves")
                        .HasForeignKey("MaChuyenBay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.Ghe", "Ghe")
                        .WithMany("Ves")
                        .HasForeignKey("MaGhe")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.GiamGia", "GiamGia")
                        .WithMany("Ves")
                        .HasForeignKey("MaGiamGia");

                    b.Navigation("ChuyenBay");

                    b.Navigation("Ghe");

                    b.Navigation("GiamGia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Entities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FlightBooking.Entities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ChuyenBay", b =>
                {
                    b.Navigation("ves");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.DichVu", b =>
                {
                    b.Navigation("ChiTietDichVus");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ghe", b =>
                {
                    b.Navigation("Ves");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.GiamGia", b =>
                {
                    b.Navigation("Ves");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.LoaiGhe", b =>
                {
                    b.Navigation("Ghes");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.MayBay", b =>
                {
                    b.Navigation("ChuyenBays");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.SanBay", b =>
                {
                    b.Navigation("TuyenBays");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.ThanhPho", b =>
                {
                    b.Navigation("SanBays");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.TuyenBay", b =>
                {
                    b.Navigation("ChuyenBays");
                });

            modelBuilder.Entity("FlightBooking.Entities.Entities.Ve", b =>
                {
                    b.Navigation("ChiTietDichVus");

                    b.Navigation("ChiTietLienHe")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
